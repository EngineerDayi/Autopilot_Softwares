
esc_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08003974  08003974  00013974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004764  08004764  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800476c  0800476c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000014  08004788  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08004788  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cab3  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001db3  00000000  00000000  0002cb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  0002e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa7  00000000  00000000  0002f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbe8  00000000  00000000  00030127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b2c  00000000  00000000  0004fd0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2516  00000000  00000000  0006083b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003980  00000000  00000000  00122d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001266d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800395c 	.word	0x0800395c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	0800395c 	.word	0x0800395c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <motor_drive>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void motor_drive()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	  SSD1306_GotoXY (0,0);
 8000504:	2100      	movs	r1, #0
 8000506:	2000      	movs	r0, #0
 8000508:	f000 fcf8 	bl	8000efc <SSD1306_GotoXY>
	  SSD1306_Puts ("PWM = %15", &Font_11x18, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	4964      	ldr	r1, [pc, #400]	; (80006a0 <motor_drive+0x1a0>)
 8000510:	4864      	ldr	r0, [pc, #400]	; (80006a4 <motor_drive+0x1a4>)
 8000512:	f000 fd89 	bl	8001028 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000516:	f000 fc4b 	bl	8000db0 <SSD1306_UpdateScreen>
	  TIM1->CCR1 = 54;
 800051a:	4b63      	ldr	r3, [pc, #396]	; (80006a8 <motor_drive+0x1a8>)
 800051c:	2236      	movs	r2, #54	; 0x36
 800051e:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR3 = 54;
 8000520:	4b61      	ldr	r3, [pc, #388]	; (80006a8 <motor_drive+0x1a8>)
 8000522:	2236      	movs	r2, #54	; 0x36
 8000524:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1->CCR4 = 54;
 8000526:	4b60      	ldr	r3, [pc, #384]	; (80006a8 <motor_drive+0x1a8>)
 8000528:	2236      	movs	r2, #54	; 0x36
 800052a:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM4->CCR1 = 54;
 800052c:	4b5f      	ldr	r3, [pc, #380]	; (80006ac <motor_drive+0x1ac>)
 800052e:	2236      	movs	r2, #54	; 0x36
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 8000532:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000536:	f001 f845 	bl	80015c4 <HAL_Delay>
	  SSD1306_Clear();
 800053a:	f000 fd9a 	bl	8001072 <SSD1306_Clear>

	  SSD1306_GotoXY (0,0);
 800053e:	2100      	movs	r1, #0
 8000540:	2000      	movs	r0, #0
 8000542:	f000 fcdb 	bl	8000efc <SSD1306_GotoXY>
	  SSD1306_Puts ("PWM = %20", &Font_11x18, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	4955      	ldr	r1, [pc, #340]	; (80006a0 <motor_drive+0x1a0>)
 800054a:	4859      	ldr	r0, [pc, #356]	; (80006b0 <motor_drive+0x1b0>)
 800054c:	f000 fd6c 	bl	8001028 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000550:	f000 fc2e 	bl	8000db0 <SSD1306_UpdateScreen>
	  TIM1->CCR1 = 55;
 8000554:	4b54      	ldr	r3, [pc, #336]	; (80006a8 <motor_drive+0x1a8>)
 8000556:	2237      	movs	r2, #55	; 0x37
 8000558:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR3 = 55;
 800055a:	4b53      	ldr	r3, [pc, #332]	; (80006a8 <motor_drive+0x1a8>)
 800055c:	2237      	movs	r2, #55	; 0x37
 800055e:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1->CCR4 = 55;
 8000560:	4b51      	ldr	r3, [pc, #324]	; (80006a8 <motor_drive+0x1a8>)
 8000562:	2237      	movs	r2, #55	; 0x37
 8000564:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM4->CCR1 = 55;
 8000566:	4b51      	ldr	r3, [pc, #324]	; (80006ac <motor_drive+0x1ac>)
 8000568:	2237      	movs	r2, #55	; 0x37
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 800056c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000570:	f001 f828 	bl	80015c4 <HAL_Delay>
	  SSD1306_Clear();
 8000574:	f000 fd7d 	bl	8001072 <SSD1306_Clear>

	  SSD1306_GotoXY (0,0);
 8000578:	2100      	movs	r1, #0
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fcbe 	bl	8000efc <SSD1306_GotoXY>
	  SSD1306_Puts ("PWM = %25", &Font_11x18, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	4947      	ldr	r1, [pc, #284]	; (80006a0 <motor_drive+0x1a0>)
 8000584:	484b      	ldr	r0, [pc, #300]	; (80006b4 <motor_drive+0x1b4>)
 8000586:	f000 fd4f 	bl	8001028 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 800058a:	f000 fc11 	bl	8000db0 <SSD1306_UpdateScreen>
	  TIM1->CCR1 = 56;
 800058e:	4b46      	ldr	r3, [pc, #280]	; (80006a8 <motor_drive+0x1a8>)
 8000590:	2238      	movs	r2, #56	; 0x38
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR3 = 56;
 8000594:	4b44      	ldr	r3, [pc, #272]	; (80006a8 <motor_drive+0x1a8>)
 8000596:	2238      	movs	r2, #56	; 0x38
 8000598:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1->CCR4 = 56;
 800059a:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <motor_drive+0x1a8>)
 800059c:	2238      	movs	r2, #56	; 0x38
 800059e:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM4->CCR1 = 56;
 80005a0:	4b42      	ldr	r3, [pc, #264]	; (80006ac <motor_drive+0x1ac>)
 80005a2:	2238      	movs	r2, #56	; 0x38
 80005a4:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80005a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005aa:	f001 f80b 	bl	80015c4 <HAL_Delay>
	  SSD1306_Clear();
 80005ae:	f000 fd60 	bl	8001072 <SSD1306_Clear>

	  SSD1306_GotoXY (0,0);
 80005b2:	2100      	movs	r1, #0
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fca1 	bl	8000efc <SSD1306_GotoXY>
	  SSD1306_Puts ("PWM = %30", &Font_11x18, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	4938      	ldr	r1, [pc, #224]	; (80006a0 <motor_drive+0x1a0>)
 80005be:	483e      	ldr	r0, [pc, #248]	; (80006b8 <motor_drive+0x1b8>)
 80005c0:	f000 fd32 	bl	8001028 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 80005c4:	f000 fbf4 	bl	8000db0 <SSD1306_UpdateScreen>
	  TIM1->CCR1 = 57;
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <motor_drive+0x1a8>)
 80005ca:	2239      	movs	r2, #57	; 0x39
 80005cc:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR3 = 57;
 80005ce:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <motor_drive+0x1a8>)
 80005d0:	2239      	movs	r2, #57	; 0x39
 80005d2:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1->CCR4 = 57;
 80005d4:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <motor_drive+0x1a8>)
 80005d6:	2239      	movs	r2, #57	; 0x39
 80005d8:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM4->CCR1 = 57;
 80005da:	4b34      	ldr	r3, [pc, #208]	; (80006ac <motor_drive+0x1ac>)
 80005dc:	2239      	movs	r2, #57	; 0x39
 80005de:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80005e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005e4:	f000 ffee 	bl	80015c4 <HAL_Delay>
	  SSD1306_Clear();
 80005e8:	f000 fd43 	bl	8001072 <SSD1306_Clear>

	  SSD1306_GotoXY (0,0);
 80005ec:	2100      	movs	r1, #0
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fc84 	bl	8000efc <SSD1306_GotoXY>
	  SSD1306_Puts ("PWM = %35", &Font_11x18, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	492a      	ldr	r1, [pc, #168]	; (80006a0 <motor_drive+0x1a0>)
 80005f8:	4830      	ldr	r0, [pc, #192]	; (80006bc <motor_drive+0x1bc>)
 80005fa:	f000 fd15 	bl	8001028 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 80005fe:	f000 fbd7 	bl	8000db0 <SSD1306_UpdateScreen>
	  TIM1->CCR1 = 58;
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <motor_drive+0x1a8>)
 8000604:	223a      	movs	r2, #58	; 0x3a
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR3 = 58;
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <motor_drive+0x1a8>)
 800060a:	223a      	movs	r2, #58	; 0x3a
 800060c:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1->CCR4 = 58;
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <motor_drive+0x1a8>)
 8000610:	223a      	movs	r2, #58	; 0x3a
 8000612:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM4->CCR1 = 58;
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <motor_drive+0x1ac>)
 8000616:	223a      	movs	r2, #58	; 0x3a
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 800061a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800061e:	f000 ffd1 	bl	80015c4 <HAL_Delay>
	  SSD1306_Clear();
 8000622:	f000 fd26 	bl	8001072 <SSD1306_Clear>

	  SSD1306_GotoXY (0,0);
 8000626:	2100      	movs	r1, #0
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fc67 	bl	8000efc <SSD1306_GotoXY>
	  SSD1306_Puts ("PWM = %40", &Font_11x18, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	491b      	ldr	r1, [pc, #108]	; (80006a0 <motor_drive+0x1a0>)
 8000632:	4823      	ldr	r0, [pc, #140]	; (80006c0 <motor_drive+0x1c0>)
 8000634:	f000 fcf8 	bl	8001028 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000638:	f000 fbba 	bl	8000db0 <SSD1306_UpdateScreen>
	  TIM1->CCR1 = 59;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <motor_drive+0x1a8>)
 800063e:	223b      	movs	r2, #59	; 0x3b
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR3 = 59;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <motor_drive+0x1a8>)
 8000644:	223b      	movs	r2, #59	; 0x3b
 8000646:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1->CCR4 = 59;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <motor_drive+0x1a8>)
 800064a:	223b      	movs	r2, #59	; 0x3b
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM4->CCR1 = 59;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <motor_drive+0x1ac>)
 8000650:	223b      	movs	r2, #59	; 0x3b
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 8000654:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000658:	f000 ffb4 	bl	80015c4 <HAL_Delay>
	  SSD1306_Clear();
 800065c:	f000 fd09 	bl	8001072 <SSD1306_Clear>

	  SSD1306_GotoXY (0,0);
 8000660:	2100      	movs	r1, #0
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fc4a 	bl	8000efc <SSD1306_GotoXY>
	  SSD1306_Puts ("PWM = %45", &Font_11x18, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <motor_drive+0x1a0>)
 800066c:	4815      	ldr	r0, [pc, #84]	; (80006c4 <motor_drive+0x1c4>)
 800066e:	f000 fcdb 	bl	8001028 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000672:	f000 fb9d 	bl	8000db0 <SSD1306_UpdateScreen>
	  TIM1->CCR1 = 60;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <motor_drive+0x1a8>)
 8000678:	223c      	movs	r2, #60	; 0x3c
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR3 = 60;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <motor_drive+0x1a8>)
 800067e:	223c      	movs	r2, #60	; 0x3c
 8000680:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1->CCR4 = 60;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <motor_drive+0x1a8>)
 8000684:	223c      	movs	r2, #60	; 0x3c
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM4->CCR1 = 60;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <motor_drive+0x1ac>)
 800068a:	223c      	movs	r2, #60	; 0x3c
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 800068e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000692:	f000 ff97 	bl	80015c4 <HAL_Delay>
	  SSD1306_Clear();
 8000696:	f000 fcec 	bl	8001072 <SSD1306_Clear>


}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	08003974 	.word	0x08003974
 80006a8:	40010000 	.word	0x40010000
 80006ac:	40000800 	.word	0x40000800
 80006b0:	08003980 	.word	0x08003980
 80006b4:	0800398c 	.word	0x0800398c
 80006b8:	08003998 	.word	0x08003998
 80006bc:	080039a4 	.word	0x080039a4
 80006c0:	080039b0 	.word	0x080039b0
 80006c4:	080039bc 	.word	0x080039bc

080006c8 <motor_stop>:

void motor_stop()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	  SSD1306_GotoXY (0,0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 fc14 	bl	8000efc <SSD1306_GotoXY>
	  SSD1306_Puts ("PWM = %0", &Font_11x18, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <motor_stop+0x44>)
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <motor_stop+0x48>)
 80006da:	f000 fca5 	bl	8001028 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 80006de:	f000 fb67 	bl	8000db0 <SSD1306_UpdateScreen>
	  TIM1->CCR1 = 50;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <motor_stop+0x4c>)
 80006e4:	2232      	movs	r2, #50	; 0x32
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR3 = 50;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <motor_stop+0x4c>)
 80006ea:	2232      	movs	r2, #50	; 0x32
 80006ec:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1->CCR4 = 50;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <motor_stop+0x4c>)
 80006f0:	2232      	movs	r2, #50	; 0x32
 80006f2:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM4->CCR1 = 50;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <motor_stop+0x50>)
 80006f6:	2232      	movs	r2, #50	; 0x32
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 80006fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006fe:	f000 ff61 	bl	80015c4 <HAL_Delay>
	  SSD1306_Clear();
 8000702:	f000 fcb6 	bl	8001072 <SSD1306_Clear>

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000000 	.word	0x20000000
 8000710:	080039c8 	.word	0x080039c8
 8000714:	40010000 	.word	0x40010000
 8000718:	40000800 	.word	0x40000800

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 fede 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f87e 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f000 fa0a 	bl	8000b40 <MX_GPIO_Init>
  MX_TIM1_Init();
 800072c:	f000 f912 	bl	8000954 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000730:	f000 f9ac 	bl	8000a8c <MX_TIM4_Init>
  MX_I2C3_Init();
 8000734:	f000 f8e0 	bl	80008f8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000738:	f000 fa76 	bl	8000c28 <SSD1306_Init>
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000742:	4830      	ldr	r0, [pc, #192]	; (8000804 <main+0xe8>)
 8000744:	f001 f9dc 	bl	8001b00 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000748:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800074c:	f000 ff3a 	bl	80015c4 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000750:	2100      	movs	r1, #0
 8000752:	482d      	ldr	r0, [pc, #180]	; (8000808 <main+0xec>)
 8000754:	f002 fc08 	bl	8002f68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000758:	2108      	movs	r1, #8
 800075a:	482b      	ldr	r0, [pc, #172]	; (8000808 <main+0xec>)
 800075c:	f002 fc04 	bl	8002f68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000760:	210c      	movs	r1, #12
 8000762:	4829      	ldr	r0, [pc, #164]	; (8000808 <main+0xec>)
 8000764:	f002 fc00 	bl	8002f68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000768:	2100      	movs	r1, #0
 800076a:	4828      	ldr	r0, [pc, #160]	; (800080c <main+0xf0>)
 800076c:	f002 fbfc 	bl	8002f68 <HAL_TIM_PWM_Start>

  SSD1306_GotoXY (0,0);
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fbc2 	bl	8000efc <SSD1306_GotoXY>
  SSD1306_Puts ("Calibrating", &Font_11x18, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	4925      	ldr	r1, [pc, #148]	; (8000810 <main+0xf4>)
 800077c:	4825      	ldr	r0, [pc, #148]	; (8000814 <main+0xf8>)
 800077e:	f000 fc53 	bl	8001028 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 8000782:	f000 fb15 	bl	8000db0 <SSD1306_UpdateScreen>

#if calibrate
  TIM1->CCR1 = 100;
 8000786:	4b24      	ldr	r3, [pc, #144]	; (8000818 <main+0xfc>)
 8000788:	2264      	movs	r2, #100	; 0x64
 800078a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR3 = 100;
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <main+0xfc>)
 800078e:	2264      	movs	r2, #100	; 0x64
 8000790:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 100;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <main+0xfc>)
 8000794:	2264      	movs	r2, #100	; 0x64
 8000796:	641a      	str	r2, [r3, #64]	; 0x40
  TIM4->CCR1 = 100;
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <main+0x100>)
 800079a:	2264      	movs	r2, #100	; 0x64
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(2000);
 800079e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007a2:	f000 ff0f 	bl	80015c4 <HAL_Delay>
  TIM1->CCR1 = 50;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <main+0xfc>)
 80007a8:	2232      	movs	r2, #50	; 0x32
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR3 = 50;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <main+0xfc>)
 80007ae:	2232      	movs	r2, #50	; 0x32
 80007b0:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 50;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <main+0xfc>)
 80007b4:	2232      	movs	r2, #50	; 0x32
 80007b6:	641a      	str	r2, [r3, #64]	; 0x40
  TIM4->CCR1 = 50;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <main+0x100>)
 80007ba:	2232      	movs	r2, #50	; 0x32
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f000 feff 	bl	80015c4 <HAL_Delay>
  TIM1->CCR1 = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <main+0xfc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
#endif


  HAL_Delay(4000);
 80007cc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80007d0:	f000 fef8 	bl	80015c4 <HAL_Delay>
  SSD1306_Clear();
 80007d4:	f000 fc4d 	bl	8001072 <SSD1306_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  motor_drive();
 80007d8:	f7ff fe92 	bl	8000500 <motor_drive>
	  motor_stop();
 80007dc:	f7ff ff74 	bl	80006c8 <motor_stop>

	  SSD1306_GotoXY (0,0);
 80007e0:	2100      	movs	r1, #0
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 fb8a 	bl	8000efc <SSD1306_GotoXY>
	  SSD1306_Puts ("Test finished", &Font_11x18, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	4909      	ldr	r1, [pc, #36]	; (8000810 <main+0xf4>)
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <main+0x104>)
 80007ee:	f000 fc1b 	bl	8001028 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 80007f2:	f000 fadd 	bl	8000db0 <SSD1306_UpdateScreen>
	  HAL_Delay(2000);
 80007f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007fa:	f000 fee3 	bl	80015c4 <HAL_Delay>
	  SSD1306_Clear();
 80007fe:	f000 fc38 	bl	8001072 <SSD1306_Clear>
	  motor_drive();
 8000802:	e7e9      	b.n	80007d8 <main+0xbc>
 8000804:	40020400 	.word	0x40020400
 8000808:	20000084 	.word	0x20000084
 800080c:	200000cc 	.word	0x200000cc
 8000810:	20000000 	.word	0x20000000
 8000814:	080039d4 	.word	0x080039d4
 8000818:	40010000 	.word	0x40010000
 800081c:	40000800 	.word	0x40000800
 8000820:	080039e0 	.word	0x080039e0

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2234      	movs	r2, #52	; 0x34
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 f866 	bl	8003904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a27      	ldr	r2, [pc, #156]	; (80008f0 <SystemClock_Config+0xcc>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <SystemClock_Config+0xd0>)
 800086e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000894:	2308      	movs	r3, #8
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000898:	2348      	movs	r3, #72	; 0x48
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 f887 	bl	80029c0 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008b8:	f000 f9b0 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fea6 	bl	8002628 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008e2:	f000 f99b 	bl	8000c1c <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C3_Init+0x50>)
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <MX_I2C3_Init+0x54>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C3_Init+0x50>)
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_I2C3_Init+0x58>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C3_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2C3_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_I2C3_Init+0x50>)
 8000916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_I2C3_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_I2C3_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_I2C3_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_I2C3_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_I2C3_Init+0x50>)
 8000936:	f001 f8fd 	bl	8001b34 <HAL_I2C_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000940:	f000 f96c 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000030 	.word	0x20000030
 800094c:	40005c00 	.word	0x40005c00
 8000950:	00061a80 	.word	0x00061a80

08000954 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b092      	sub	sp, #72	; 0x48
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2220      	movs	r2, #32
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f002 ffc0 	bl	8003904 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000984:	4b3f      	ldr	r3, [pc, #252]	; (8000a84 <MX_TIM1_Init+0x130>)
 8000986:	4a40      	ldr	r2, [pc, #256]	; (8000a88 <MX_TIM1_Init+0x134>)
 8000988:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 800098a:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <MX_TIM1_Init+0x130>)
 800098c:	22b3      	movs	r2, #179	; 0xb3
 800098e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b3c      	ldr	r3, [pc, #240]	; (8000a84 <MX_TIM1_Init+0x130>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <MX_TIM1_Init+0x130>)
 8000998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <MX_TIM1_Init+0x130>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a4:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <MX_TIM1_Init+0x130>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <MX_TIM1_Init+0x130>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b0:	4834      	ldr	r0, [pc, #208]	; (8000a84 <MX_TIM1_Init+0x130>)
 80009b2:	f002 fa89 	bl	8002ec8 <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80009bc:	f000 f92e 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009cc:	4619      	mov	r1, r3
 80009ce:	482d      	ldr	r0, [pc, #180]	; (8000a84 <MX_TIM1_Init+0x130>)
 80009d0:	f002 feca 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80009da:	f000 f91f 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	; 0x60
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <MX_TIM1_Init+0x130>)
 8000a04:	f002 fb78 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000a0e:	f000 f905 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	2208      	movs	r2, #8
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481a      	ldr	r0, [pc, #104]	; (8000a84 <MX_TIM1_Init+0x130>)
 8000a1c:	f002 fb6c 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000a26:	f000 f8f9 	bl	8000c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	220c      	movs	r2, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_TIM1_Init+0x130>)
 8000a34:	f002 fb60 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000a3e:	f000 f8ed 	bl	8000c1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MX_TIM1_Init+0x130>)
 8000a66:	f002 fefb 	bl	8003860 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000a70:	f000 f8d4 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MX_TIM1_Init+0x130>)
 8000a76:	f000 fc69 	bl	800134c <HAL_TIM_MspPostInit>

}
 8000a7a:	bf00      	nop
 8000a7c:	3748      	adds	r7, #72	; 0x48
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000084 	.word	0x20000084
 8000a88:	40010000 	.word	0x40010000

08000a8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000ab0:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MX_TIM4_Init+0xb0>)
 8000ab2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 179;
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000ab6:	22b3      	movs	r2, #179	; 0xb3
 8000ab8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000ac2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ad4:	4818      	ldr	r0, [pc, #96]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000ad6:	f002 f9f7 	bl	8002ec8 <HAL_TIM_PWM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000ae0:	f000 f89c 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aec:	f107 0320 	add.w	r3, r7, #32
 8000af0:	4619      	mov	r1, r3
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000af4:	f002 fe38 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000afe:	f000 f88d 	bl	8000c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	4619      	mov	r1, r3
 8000b18:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000b1a:	f002 faed 	bl	80030f8 <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000b24:	f000 f87a 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <MX_TIM4_Init+0xac>)
 8000b2a:	f000 fc0f 	bl	800134c <HAL_TIM_MspPostInit>

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000cc 	.word	0x200000cc
 8000b3c:	40000800 	.word	0x40000800

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a2d      	ldr	r2, [pc, #180]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_GPIO_Init+0xd4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <MX_GPIO_Init+0xd8>)
 8000bea:	f000 ff89 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8000bee:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_GPIO_Init+0xd8>)
 8000c08:	f000 fde6 	bl	80017d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c2e:	f000 fa29 	bl	8001084 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c32:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c36:	2201      	movs	r2, #1
 8000c38:	2178      	movs	r1, #120	; 0x78
 8000c3a:	485b      	ldr	r0, [pc, #364]	; (8000da8 <SSD1306_Init+0x180>)
 8000c3c:	f001 f9bc 	bl	8001fb8 <HAL_I2C_IsDeviceReady>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e0a9      	b.n	8000d9e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c4a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000c4e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c50:	e002      	b.n	8000c58 <SSD1306_Init+0x30>
		p--;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f9      	bne.n	8000c52 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c5e:	22ae      	movs	r2, #174	; 0xae
 8000c60:	2100      	movs	r1, #0
 8000c62:	2078      	movs	r0, #120	; 0x78
 8000c64:	f000 fa8a 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c68:	2220      	movs	r2, #32
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2078      	movs	r0, #120	; 0x78
 8000c6e:	f000 fa85 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c72:	2210      	movs	r2, #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	2078      	movs	r0, #120	; 0x78
 8000c78:	f000 fa80 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c7c:	22b0      	movs	r2, #176	; 0xb0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2078      	movs	r0, #120	; 0x78
 8000c82:	f000 fa7b 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c86:	22c8      	movs	r2, #200	; 0xc8
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2078      	movs	r0, #120	; 0x78
 8000c8c:	f000 fa76 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2078      	movs	r0, #120	; 0x78
 8000c96:	f000 fa71 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2078      	movs	r0, #120	; 0x78
 8000ca0:	f000 fa6c 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ca4:	2240      	movs	r2, #64	; 0x40
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2078      	movs	r0, #120	; 0x78
 8000caa:	f000 fa67 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000cae:	2281      	movs	r2, #129	; 0x81
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2078      	movs	r0, #120	; 0x78
 8000cb4:	f000 fa62 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000cb8:	22ff      	movs	r2, #255	; 0xff
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2078      	movs	r0, #120	; 0x78
 8000cbe:	f000 fa5d 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000cc2:	22a1      	movs	r2, #161	; 0xa1
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2078      	movs	r0, #120	; 0x78
 8000cc8:	f000 fa58 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ccc:	22a6      	movs	r2, #166	; 0xa6
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2078      	movs	r0, #120	; 0x78
 8000cd2:	f000 fa53 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000cd6:	22a8      	movs	r2, #168	; 0xa8
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2078      	movs	r0, #120	; 0x78
 8000cdc:	f000 fa4e 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ce0:	223f      	movs	r2, #63	; 0x3f
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2078      	movs	r0, #120	; 0x78
 8000ce6:	f000 fa49 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cea:	22a4      	movs	r2, #164	; 0xa4
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	; 0x78
 8000cf0:	f000 fa44 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000cf4:	22d3      	movs	r2, #211	; 0xd3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2078      	movs	r0, #120	; 0x78
 8000cfa:	f000 fa3f 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	; 0x78
 8000d04:	f000 fa3a 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d08:	22d5      	movs	r2, #213	; 0xd5
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	; 0x78
 8000d0e:	f000 fa35 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d12:	22f0      	movs	r2, #240	; 0xf0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	; 0x78
 8000d18:	f000 fa30 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d1c:	22d9      	movs	r2, #217	; 0xd9
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	; 0x78
 8000d22:	f000 fa2b 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d26:	2222      	movs	r2, #34	; 0x22
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	; 0x78
 8000d2c:	f000 fa26 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d30:	22da      	movs	r2, #218	; 0xda
 8000d32:	2100      	movs	r1, #0
 8000d34:	2078      	movs	r0, #120	; 0x78
 8000d36:	f000 fa21 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000d3a:	2212      	movs	r2, #18
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2078      	movs	r0, #120	; 0x78
 8000d40:	f000 fa1c 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d44:	22db      	movs	r2, #219	; 0xdb
 8000d46:	2100      	movs	r1, #0
 8000d48:	2078      	movs	r0, #120	; 0x78
 8000d4a:	f000 fa17 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d4e:	2220      	movs	r2, #32
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	; 0x78
 8000d54:	f000 fa12 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d58:	228d      	movs	r2, #141	; 0x8d
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2078      	movs	r0, #120	; 0x78
 8000d5e:	f000 fa0d 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d62:	2214      	movs	r2, #20
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	; 0x78
 8000d68:	f000 fa08 	bl	800117c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d6c:	22af      	movs	r2, #175	; 0xaf
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2078      	movs	r0, #120	; 0x78
 8000d72:	f000 fa03 	bl	800117c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d76:	222e      	movs	r2, #46	; 0x2e
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2078      	movs	r0, #120	; 0x78
 8000d7c:	f000 f9fe 	bl	800117c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 f843 	bl	8000e0c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d86:	f000 f813 	bl	8000db0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <SSD1306_Init+0x184>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SSD1306_Init+0x184>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SSD1306_Init+0x184>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000030 	.word	0x20000030
 8000dac:	20000514 	.word	0x20000514

08000db0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	e01d      	b.n	8000df8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	3b50      	subs	r3, #80	; 0x50
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2078      	movs	r0, #120	; 0x78
 8000dc8:	f000 f9d8 	bl	800117c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2078      	movs	r0, #120	; 0x78
 8000dd2:	f000 f9d3 	bl	800117c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2078      	movs	r0, #120	; 0x78
 8000ddc:	f000 f9ce 	bl	800117c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	01db      	lsls	r3, r3, #7
 8000de4:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <SSD1306_UpdateScreen+0x58>)
 8000de6:	441a      	add	r2, r3
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	2078      	movs	r0, #120	; 0x78
 8000dee:	f000 f95f 	bl	80010b0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	3301      	adds	r3, #1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b07      	cmp	r3, #7
 8000dfc:	d9de      	bls.n	8000dbc <SSD1306_UpdateScreen+0xc>
	}
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000114 	.word	0x20000114

08000e0c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <SSD1306_Fill+0x14>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e000      	b.n	8000e22 <SSD1306_Fill+0x16>
 8000e20:	23ff      	movs	r3, #255	; 0xff
 8000e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e26:	4619      	mov	r1, r3
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <SSD1306_Fill+0x2c>)
 8000e2a:	f002 fd6b 	bl	8003904 <memset>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000114 	.word	0x20000114

08000e3c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	460b      	mov	r3, r1
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	70fb      	strb	r3, [r7, #3]
	if (
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	2b7f      	cmp	r3, #127	; 0x7f
 8000e52:	d848      	bhi.n	8000ee6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	2b3f      	cmp	r3, #63	; 0x3f
 8000e58:	d845      	bhi.n	8000ee6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <SSD1306_DrawPixel+0xb8>)
 8000e5c:	791b      	ldrb	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf0c      	ite	eq
 8000e68:	2301      	moveq	r3, #1
 8000e6a:	2300      	movne	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d11a      	bne.n	8000eac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e76:	88fa      	ldrh	r2, [r7, #6]
 8000e78:	88bb      	ldrh	r3, [r7, #4]
 8000e7a:	08db      	lsrs	r3, r3, #3
 8000e7c:	b298      	uxth	r0, r3
 8000e7e:	4603      	mov	r3, r0
 8000e80:	01db      	lsls	r3, r3, #7
 8000e82:	4413      	add	r3, r2
 8000e84:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <SSD1306_DrawPixel+0xbc>)
 8000e86:	5cd3      	ldrb	r3, [r2, r3]
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	2101      	movs	r1, #1
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b259      	sxtb	r1, r3
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	01db      	lsls	r3, r3, #7
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b2c9      	uxtb	r1, r1
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <SSD1306_DrawPixel+0xbc>)
 8000ea8:	54d1      	strb	r1, [r2, r3]
 8000eaa:	e01d      	b.n	8000ee8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	08db      	lsrs	r3, r3, #3
 8000eb2:	b298      	uxth	r0, r3
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	01db      	lsls	r3, r3, #7
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <SSD1306_DrawPixel+0xbc>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	b259      	sxtb	r1, r3
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	4603      	mov	r3, r0
 8000eda:	01db      	lsls	r3, r3, #7
 8000edc:	4413      	add	r3, r2
 8000ede:	b2c9      	uxtb	r1, r1
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SSD1306_DrawPixel+0xbc>)
 8000ee2:	54d1      	strb	r1, [r2, r3]
 8000ee4:	e000      	b.n	8000ee8 <SSD1306_DrawPixel+0xac>
		return;
 8000ee6:	bf00      	nop
	}
}
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000514 	.word	0x20000514
 8000ef8:	20000114 	.word	0x20000114

08000efc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	80fb      	strh	r3, [r7, #6]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SSD1306_GotoXY+0x28>)
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <SSD1306_GotoXY+0x28>)
 8000f14:	88bb      	ldrh	r3, [r7, #4]
 8000f16:	8053      	strh	r3, [r2, #2]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	20000514 	.word	0x20000514

08000f28 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f38:	4b3a      	ldr	r3, [pc, #232]	; (8001024 <SSD1306_Putc+0xfc>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
	if (
 8000f44:	2b7f      	cmp	r3, #127	; 0x7f
 8000f46:	dc07      	bgt.n	8000f58 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <SSD1306_Putc+0xfc>)
 8000f4a:	885b      	ldrh	r3, [r3, #2]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f54:	2b3f      	cmp	r3, #63	; 0x3f
 8000f56:	dd01      	ble.n	8000f5c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e05e      	b.n	800101a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e04b      	b.n	8000ffa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	3b20      	subs	r3, #32
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	7849      	ldrb	r1, [r1, #1]
 8000f6e:	fb01 f303 	mul.w	r3, r1, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	440b      	add	r3, r1
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	e030      	b.n	8000fe8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d010      	beq.n	8000fb8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <SSD1306_Putc+0xfc>)
 8000f98:	881a      	ldrh	r2, [r3, #0]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b298      	uxth	r0, r3
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <SSD1306_Putc+0xfc>)
 8000fa4:	885a      	ldrh	r2, [r3, #2]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	4413      	add	r3, r2
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	79ba      	ldrb	r2, [r7, #6]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff ff43 	bl	8000e3c <SSD1306_DrawPixel>
 8000fb6:	e014      	b.n	8000fe2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <SSD1306_Putc+0xfc>)
 8000fba:	881a      	ldrh	r2, [r3, #0]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b298      	uxth	r0, r3
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <SSD1306_Putc+0xfc>)
 8000fc6:	885a      	ldrh	r2, [r3, #2]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	b299      	uxth	r1, r3
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2301      	moveq	r3, #1
 8000fd8:	2300      	movne	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f7ff ff2d 	bl	8000e3c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d3c8      	bcc.n	8000f86 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	461a      	mov	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	4293      	cmp	r3, r2
 8001004:	d3ad      	bcc.n	8000f62 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <SSD1306_Putc+0xfc>)
 8001008:	881a      	ldrh	r2, [r3, #0]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	4413      	add	r3, r2
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <SSD1306_Putc+0xfc>)
 8001016:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001018:	79fb      	ldrb	r3, [r7, #7]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000514 	.word	0x20000514

08001028 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	4613      	mov	r3, r2
 8001034:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001036:	e012      	b.n	800105e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff71 	bl	8000f28 <SSD1306_Putc>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d002      	beq.n	8001058 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	e008      	b.n	800106a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1e8      	bne.n	8001038 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff fec8 	bl	8000e0c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800107c:	f7ff fe98 	bl	8000db0 <SSD1306_UpdateScreen>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <ssd1306_I2C_Init+0x28>)
 800108c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800108e:	e002      	b.n	8001096 <ssd1306_I2C_Init+0x12>
		p--;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f9      	bne.n	8001090 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	0003d090 	.word	0x0003d090

080010b0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b0c7      	sub	sp, #284	; 0x11c
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80010be:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80010c2:	600a      	str	r2, [r1, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ca:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80010ce:	4622      	mov	r2, r4
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010d6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80010da:	4602      	mov	r2, r0
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010e6:	460a      	mov	r2, r1
 80010e8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80010ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010f6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80010fa:	7812      	ldrb	r2, [r2, #0]
 80010fc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001104:	e015      	b.n	8001132 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001106:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800110a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800110e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	441a      	add	r2, r3
 8001116:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800111a:	3301      	adds	r3, #1
 800111c:	7811      	ldrb	r1, [r2, #0]
 800111e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001122:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001126:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001128:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800112c:	3301      	adds	r3, #1
 800112e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001132:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001136:	b29b      	uxth	r3, r3
 8001138:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800113c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001140:	8812      	ldrh	r2, [r2, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d8df      	bhi.n	8001106 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 8001146:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800114a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b299      	uxth	r1, r3
 8001152:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001156:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	b29b      	uxth	r3, r3
 8001160:	f107 020c 	add.w	r2, r7, #12
 8001164:	200a      	movs	r0, #10
 8001166:	9000      	str	r0, [sp, #0]
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <ssd1306_I2C_WriteMulti+0xc8>)
 800116a:	f000 fe27 	bl	8001dbc <HAL_I2C_Master_Transmit>
}
 800116e:	bf00      	nop
 8001170:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	20000030 	.word	0x20000030

0800117c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	460b      	mov	r3, r1
 8001188:	71bb      	strb	r3, [r7, #6]
 800118a:	4613      	mov	r3, r2
 800118c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001192:	797b      	ldrb	r3, [r7, #5]
 8001194:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	b299      	uxth	r1, r3
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	230a      	movs	r3, #10
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2302      	movs	r3, #2
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <ssd1306_I2C_Write+0x38>)
 80011a6:	f000 fe09 	bl	8001dbc <HAL_I2C_Master_Transmit>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000030 	.word	0x20000030

080011b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_MspInit+0x4c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x4c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a29      	ldr	r2, [pc, #164]	; (80012cc <HAL_I2C_MspInit+0xc4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d14b      	bne.n	80012c2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_I2C_MspInit+0xc8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <HAL_I2C_MspInit+0xc8>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_I2C_MspInit+0xc8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_I2C_MspInit+0xc8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <HAL_I2C_MspInit+0xc8>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_I2C_MspInit+0xc8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001268:	2312      	movs	r3, #18
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001274:	2304      	movs	r3, #4
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4815      	ldr	r0, [pc, #84]	; (80012d4 <HAL_I2C_MspInit+0xcc>)
 8001280:	f000 faaa 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128a:	2312      	movs	r3, #18
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001296:	2304      	movs	r3, #4
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_I2C_MspInit+0xd0>)
 80012a2:	f000 fa99 	bl	80017d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_I2C_MspInit+0xc8>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_I2C_MspInit+0xc8>)
 80012b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_I2C_MspInit+0xc8>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40005c00 	.word	0x40005c00
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020000 	.word	0x40020000

080012dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <HAL_TIM_PWM_MspInit+0x64>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10e      	bne.n	800130c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800130a:	e012      	b.n	8001332 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_TIM_PWM_MspInit+0x6c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10d      	bne.n	8001332 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_TIM_PWM_MspInit+0x68>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40010000 	.word	0x40010000
 8001344:	40023800 	.word	0x40023800
 8001348:	40000800 	.word	0x40000800

0800134c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a25      	ldr	r2, [pc, #148]	; (8001400 <HAL_TIM_MspPostInit+0xb4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d11f      	bne.n	80013ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_TIM_MspPostInit+0xb8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a23      	ldr	r2, [pc, #140]	; (8001404 <HAL_TIM_MspPostInit+0xb8>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_TIM_MspPostInit+0xb8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_14;
 800138a:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800139c:	2301      	movs	r3, #1
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4818      	ldr	r0, [pc, #96]	; (8001408 <HAL_TIM_MspPostInit+0xbc>)
 80013a8:	f000 fa16 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013ac:	e023      	b.n	80013f6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <HAL_TIM_MspPostInit+0xc0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d11e      	bne.n	80013f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_TIM_MspPostInit+0xb8>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_TIM_MspPostInit+0xb8>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_TIM_MspPostInit+0xb8>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013e6:	2302      	movs	r3, #2
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <HAL_TIM_MspPostInit+0xc4>)
 80013f2:	f000 f9f1 	bl	80017d8 <HAL_GPIO_Init>
}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40010000 	.word	0x40010000
 8001404:	40023800 	.word	0x40023800
 8001408:	40021000 	.word	0x40021000
 800140c:	40000800 	.word	0x40000800
 8001410:	40020c00 	.word	0x40020c00

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f000 f890 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <SystemInit+0x20>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <SystemInit+0x20>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a8:	4c0b      	ldr	r4, [pc, #44]	; (80014d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014b6:	f7ff ffd7 	bl	8001468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f002 fa2b 	bl	8003914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff f92d 	bl	800071c <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014c4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80014d0:	08004774 	.word	0x08004774
  ldr r2, =_sbss
 80014d4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80014d8:	20000520 	.word	0x20000520

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_Init+0x40>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_Init+0x40>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x40>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f931 	bl	8001770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fe50 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f93b 	bl	80017be <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f911 	bl	8001786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000008 	.word	0x20000008
 800157c:	20000010 	.word	0x20000010
 8001580:	2000000c 	.word	0x2000000c

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000010 	.word	0x20000010
 80015a8:	2000051c 	.word	0x2000051c

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	2000051c 	.word	0x2000051c

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_Delay+0x44>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffde 	bl	80015ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000010 	.word	0x20000010

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800173c:	d301      	bcc.n	8001742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173e:	2301      	movs	r3, #1
 8001740:	e00f      	b.n	8001762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <SysTick_Config+0x40>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174a:	210f      	movs	r1, #15
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f7ff ff8e 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <SysTick_Config+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <SysTick_Config+0x40>)
 800175c:	2207      	movs	r2, #7
 800175e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff47 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001798:	f7ff ff5c 	bl	8001654 <__NVIC_GetPriorityGrouping>
 800179c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	6978      	ldr	r0, [r7, #20]
 80017a4:	f7ff ff8e 	bl	80016c4 <NVIC_EncodePriority>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <__NVIC_SetPriority>
}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffb0 	bl	800172c <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e165      	b.n	8001ac0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8154 	bne.w	8001aba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80ae 	beq.w	8001aba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a5c      	ldr	r2, [pc, #368]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b5a      	ldr	r3, [pc, #360]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_GPIO_Init+0x304>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4f      	ldr	r2, [pc, #316]	; (8001ae0 <HAL_GPIO_Init+0x308>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d025      	beq.n	80019f2 <HAL_GPIO_Init+0x21a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4e      	ldr	r2, [pc, #312]	; (8001ae4 <HAL_GPIO_Init+0x30c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d01f      	beq.n	80019ee <HAL_GPIO_Init+0x216>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4d      	ldr	r2, [pc, #308]	; (8001ae8 <HAL_GPIO_Init+0x310>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_GPIO_Init+0x212>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_GPIO_Init+0x314>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x20e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4b      	ldr	r2, [pc, #300]	; (8001af0 <HAL_GPIO_Init+0x318>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x20a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4a      	ldr	r2, [pc, #296]	; (8001af4 <HAL_GPIO_Init+0x31c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x206>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_GPIO_Init+0x320>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x202>
 80019d6:	2306      	movs	r3, #6
 80019d8:	e00c      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019da:	2307      	movs	r3, #7
 80019dc:	e00a      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019de:	2305      	movs	r3, #5
 80019e0:	e008      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019e2:	2304      	movs	r3, #4
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019e6:	2303      	movs	r3, #3
 80019e8:	e004      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e002      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <HAL_GPIO_Init+0x21c>
 80019f2:	2300      	movs	r3, #0
 80019f4:	69fa      	ldr	r2, [r7, #28]
 80019f6:	f002 0203 	and.w	r2, r2, #3
 80019fa:	0092      	lsls	r2, r2, #2
 80019fc:	4093      	lsls	r3, r2
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a04:	4935      	ldr	r1, [pc, #212]	; (8001adc <HAL_GPIO_Init+0x304>)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a12:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a36:	4a31      	ldr	r2, [pc, #196]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a3c:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a60:	4a26      	ldr	r2, [pc, #152]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a66:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab4:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_GPIO_Init+0x324>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3301      	adds	r3, #1
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	f67f ae96 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40013800 	.word	0x40013800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	40020c00 	.word	0x40020c00
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40021400 	.word	0x40021400
 8001af8:	40021800 	.word	0x40021800
 8001afc:	40013c00 	.word	0x40013c00

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	619a      	str	r2, [r3, #24]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e12b      	b.n	8001d9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fb54 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2224      	movs	r2, #36	; 0x24
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b98:	f000 fefe 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8001b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4a81      	ldr	r2, [pc, #516]	; (8001da8 <HAL_I2C_Init+0x274>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d807      	bhi.n	8001bb8 <HAL_I2C_Init+0x84>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a80      	ldr	r2, [pc, #512]	; (8001dac <HAL_I2C_Init+0x278>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	bf94      	ite	ls
 8001bb0:	2301      	movls	r3, #1
 8001bb2:	2300      	movhi	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e006      	b.n	8001bc6 <HAL_I2C_Init+0x92>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4a7d      	ldr	r2, [pc, #500]	; (8001db0 <HAL_I2C_Init+0x27c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	bf94      	ite	ls
 8001bc0:	2301      	movls	r3, #1
 8001bc2:	2300      	movhi	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0e7      	b.n	8001d9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4a78      	ldr	r2, [pc, #480]	; (8001db4 <HAL_I2C_Init+0x280>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9b      	lsrs	r3, r3, #18
 8001bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a6a      	ldr	r2, [pc, #424]	; (8001da8 <HAL_I2C_Init+0x274>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d802      	bhi.n	8001c08 <HAL_I2C_Init+0xd4>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3301      	adds	r3, #1
 8001c06:	e009      	b.n	8001c1c <HAL_I2C_Init+0xe8>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	4a69      	ldr	r2, [pc, #420]	; (8001db8 <HAL_I2C_Init+0x284>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	495c      	ldr	r1, [pc, #368]	; (8001da8 <HAL_I2C_Init+0x274>)
 8001c38:	428b      	cmp	r3, r1
 8001c3a:	d819      	bhi.n	8001c70 <HAL_I2C_Init+0x13c>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1e59      	subs	r1, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4a:	1c59      	adds	r1, r3, #1
 8001c4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c50:	400b      	ands	r3, r1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <HAL_I2C_Init+0x138>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1e59      	subs	r1, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c64:	3301      	adds	r3, #1
 8001c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6a:	e051      	b.n	8001d10 <HAL_I2C_Init+0x1dc>
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	e04f      	b.n	8001d10 <HAL_I2C_Init+0x1dc>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d111      	bne.n	8001c9c <HAL_I2C_Init+0x168>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e58      	subs	r0, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	440b      	add	r3, r1
 8001c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e012      	b.n	8001cc2 <HAL_I2C_Init+0x18e>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1e58      	subs	r0, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	0099      	lsls	r1, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Init+0x196>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e022      	b.n	8001d10 <HAL_I2C_Init+0x1dc>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_I2C_Init+0x1bc>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1e58      	subs	r0, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6859      	ldr	r1, [r3, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	440b      	add	r3, r1
 8001ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cee:	e00f      	b.n	8001d10 <HAL_I2C_Init+0x1dc>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1e58      	subs	r0, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	0099      	lsls	r1, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	6809      	ldr	r1, [r1, #0]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6911      	ldr	r1, [r2, #16]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68d2      	ldr	r2, [r2, #12]
 8001d4a:	4311      	orrs	r1, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	000186a0 	.word	0x000186a0
 8001dac:	001e847f 	.word	0x001e847f
 8001db0:	003d08ff 	.word	0x003d08ff
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	10624dd3 	.word	0x10624dd3

08001dbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	817b      	strh	r3, [r7, #10]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff fbec 	bl	80015ac <HAL_GetTick>
 8001dd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	f040 80e0 	bne.w	8001fa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2319      	movs	r3, #25
 8001dea:	2201      	movs	r2, #1
 8001dec:	4970      	ldr	r1, [pc, #448]	; (8001fb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fa92 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e0d3      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_I2C_Master_Transmit+0x50>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e0cc      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d007      	beq.n	8001e32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2221      	movs	r2, #33	; 0x21
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	893a      	ldrh	r2, [r7, #8]
 8001e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4a50      	ldr	r2, [pc, #320]	; (8001fb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e74:	8979      	ldrh	r1, [r7, #10]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	6a3a      	ldr	r2, [r7, #32]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f9ca 	bl	8002214 <I2C_MasterRequestWrite>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e08d      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ea0:	e066      	b.n	8001f70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fb0c 	bl	80024c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00d      	beq.n	8001ece <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d107      	bne.n	8001eca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06b      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d11b      	bne.n	8001f44 <HAL_I2C_Master_Transmit+0x188>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d017      	beq.n	8001f44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	6a39      	ldr	r1, [r7, #32]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fafc 	bl	8002546 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00d      	beq.n	8001f70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d107      	bne.n	8001f6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e01a      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d194      	bne.n	8001ea2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	00100002 	.word	0x00100002
 8001fb4:	ffff0000 	.word	0xffff0000

08001fb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff faf0 	bl	80015ac <HAL_GetTick>
 8001fcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	f040 8111 	bne.w	8002202 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2319      	movs	r3, #25
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4988      	ldr	r1, [pc, #544]	; (800220c <HAL_I2C_IsDeviceReady+0x254>)
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f994 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e104      	b.n	8002204 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_I2C_IsDeviceReady+0x50>
 8002004:	2302      	movs	r3, #2
 8002006:	e0fd      	b.n	8002204 <HAL_I2C_IsDeviceReady+0x24c>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d007      	beq.n	800202e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2224      	movs	r2, #36	; 0x24
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a70      	ldr	r2, [pc, #448]	; (8002210 <HAL_I2C_IsDeviceReady+0x258>)
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002060:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2200      	movs	r2, #0
 800206a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f952 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00d      	beq.n	8002096 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002088:	d103      	bne.n	8002092 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0b6      	b.n	8002204 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002096:	897b      	ldrh	r3, [r7, #10]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fa81 	bl	80015ac <HAL_GetTick>
 80020aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020da:	e025      	b.n	8002128 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020dc:	f7ff fa66 	bl	80015ac <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d302      	bcc.n	80020f2 <HAL_I2C_IsDeviceReady+0x13a>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d103      	bne.n	80020fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	22a0      	movs	r2, #160	; 0xa0
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2ba0      	cmp	r3, #160	; 0xa0
 8002132:	d005      	beq.n	8002140 <HAL_I2C_IsDeviceReady+0x188>
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_I2C_IsDeviceReady+0x188>
 800213a:	7dbb      	ldrb	r3, [r7, #22]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0cd      	beq.n	80020dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b02      	cmp	r3, #2
 8002154:	d129      	bne.n	80021aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002164:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2319      	movs	r3, #25
 8002182:	2201      	movs	r2, #1
 8002184:	4921      	ldr	r1, [pc, #132]	; (800220c <HAL_I2C_IsDeviceReady+0x254>)
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f8c6 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e036      	b.n	8002204 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e02c      	b.n	8002204 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2319      	movs	r3, #25
 80021ca:	2201      	movs	r2, #1
 80021cc:	490f      	ldr	r1, [pc, #60]	; (800220c <HAL_I2C_IsDeviceReady+0x254>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f8a2 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e012      	b.n	8002204 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f4ff af32 	bcc.w	8002052 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002202:	2302      	movs	r3, #2
  }
}
 8002204:	4618      	mov	r0, r3
 8002206:	3720      	adds	r7, #32
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	00100002 	.word	0x00100002
 8002210:	ffff0000 	.word	0xffff0000

08002214 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	460b      	mov	r3, r1
 8002222:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d006      	beq.n	800223e <I2C_MasterRequestWrite+0x2a>
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d003      	beq.n	800223e <I2C_MasterRequestWrite+0x2a>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800223c:	d108      	bne.n	8002250 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e00b      	b.n	8002268 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	2b12      	cmp	r3, #18
 8002256:	d107      	bne.n	8002268 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002266:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f84f 	bl	8002318 <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00d      	beq.n	800229c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228e:	d103      	bne.n	8002298 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e035      	b.n	8002308 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022a4:	d108      	bne.n	80022b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022a6:	897b      	ldrh	r3, [r7, #10]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022b4:	611a      	str	r2, [r3, #16]
 80022b6:	e01b      	b.n	80022f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022b8:	897b      	ldrh	r3, [r7, #10]
 80022ba:	11db      	asrs	r3, r3, #7
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 0306 	and.w	r3, r3, #6
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f063 030f 	orn	r3, r3, #15
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	490e      	ldr	r1, [pc, #56]	; (8002310 <I2C_MasterRequestWrite+0xfc>)
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f875 	bl	80023c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e010      	b.n	8002308 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022e6:	897b      	ldrh	r3, [r7, #10]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <I2C_MasterRequestWrite+0x100>)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f865 	bl	80023c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	00010008 	.word	0x00010008
 8002314:	00010002 	.word	0x00010002

08002318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002328:	e025      	b.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d021      	beq.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002332:	f7ff f93b 	bl	80015ac <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d116      	bne.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f043 0220 	orr.w	r2, r3, #32
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e023      	b.n	80023be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d10d      	bne.n	800239c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4013      	ands	r3, r2
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	e00c      	b.n	80023b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4013      	ands	r3, r2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d0b6      	beq.n	800232a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023d4:	e051      	b.n	800247a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e4:	d123      	bne.n	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e046      	b.n	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d021      	beq.n	800247a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7ff f8b9 	bl	80015ac <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d116      	bne.n	800247a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e020      	b.n	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10c      	bne.n	800249e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4013      	ands	r3, r2
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	e00b      	b.n	80024b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d18d      	bne.n	80023d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024d0:	e02d      	b.n	800252e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f878 	bl	80025c8 <I2C_IsAcknowledgeFailed>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e02d      	b.n	800253e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d021      	beq.n	800252e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ea:	f7ff f85f 	bl	80015ac <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d302      	bcc.n	8002500 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d116      	bne.n	800252e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f043 0220 	orr.w	r2, r3, #32
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e007      	b.n	800253e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d1ca      	bne.n	80024d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002552:	e02d      	b.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f837 	bl	80025c8 <I2C_IsAcknowledgeFailed>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e02d      	b.n	80025c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256a:	d021      	beq.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256c:	f7ff f81e 	bl	80015ac <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	429a      	cmp	r2, r3
 800257a:	d302      	bcc.n	8002582 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f043 0220 	orr.w	r2, r3, #32
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e007      	b.n	80025c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d1ca      	bne.n	8002554 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025de:	d11b      	bne.n	8002618 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f043 0204 	orr.w	r2, r3, #4
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0cc      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d90c      	bls.n	8002664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b8      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002694:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a52      	ldr	r2, [pc, #328]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800269e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	494d      	ldr	r1, [pc, #308]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d044      	beq.n	8002748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e067      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4934      	ldr	r1, [pc, #208]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7fe ff48 	bl	80015ac <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fe ff44 	bl	80015ac <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e04f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d20c      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e032      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4916      	ldr	r1, [pc, #88]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	490e      	ldr	r1, [pc, #56]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ae:	f000 f821 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	490a      	ldr	r1, [pc, #40]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fea8 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023c00 	.word	0x40023c00
 80027e4:	40023800 	.word	0x40023800
 80027e8:	0800474c 	.word	0x0800474c
 80027ec:	20000008 	.word	0x20000008
 80027f0:	2000000c 	.word	0x2000000c

080027f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f8:	b090      	sub	sp, #64	; 0x40
 80027fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002800:	2300      	movs	r3, #0
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002804:	2300      	movs	r3, #0
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280c:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_GetSysClockFreq+0x180>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d00d      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x40>
 8002818:	2b08      	cmp	r3, #8
 800281a:	f200 80a1 	bhi.w	8002960 <HAL_RCC_GetSysClockFreq+0x16c>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x34>
 8002822:	2b04      	cmp	r3, #4
 8002824:	d003      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x3a>
 8002826:	e09b      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_GetSysClockFreq+0x184>)
 800282a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800282c:	e09b      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800282e:	4b53      	ldr	r3, [pc, #332]	; (800297c <HAL_RCC_GetSysClockFreq+0x188>)
 8002830:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002832:	e098      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002834:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <HAL_RCC_GetSysClockFreq+0x180>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800283e:	4b4d      	ldr	r3, [pc, #308]	; (8002974 <HAL_RCC_GetSysClockFreq+0x180>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d028      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <HAL_RCC_GetSysClockFreq+0x180>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	2200      	movs	r2, #0
 8002852:	623b      	str	r3, [r7, #32]
 8002854:	627a      	str	r2, [r7, #36]	; 0x24
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800285c:	2100      	movs	r1, #0
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_GetSysClockFreq+0x188>)
 8002860:	fb03 f201 	mul.w	r2, r3, r1
 8002864:	2300      	movs	r3, #0
 8002866:	fb00 f303 	mul.w	r3, r0, r3
 800286a:	4413      	add	r3, r2
 800286c:	4a43      	ldr	r2, [pc, #268]	; (800297c <HAL_RCC_GetSysClockFreq+0x188>)
 800286e:	fba0 1202 	umull	r1, r2, r0, r2
 8002872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002874:	460a      	mov	r2, r1
 8002876:	62ba      	str	r2, [r7, #40]	; 0x28
 8002878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800287a:	4413      	add	r3, r2
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002880:	2200      	movs	r2, #0
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	61fa      	str	r2, [r7, #28]
 8002886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800288e:	f7fd fcb9 	bl	8000204 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4613      	mov	r3, r2
 8002898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800289a:	e053      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289c:	4b35      	ldr	r3, [pc, #212]	; (8002974 <HAL_RCC_GetSysClockFreq+0x180>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	2200      	movs	r2, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	617a      	str	r2, [r7, #20]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028ae:	f04f 0b00 	mov.w	fp, #0
 80028b2:	4652      	mov	r2, sl
 80028b4:	465b      	mov	r3, fp
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c4:	0150      	lsls	r0, r2, #5
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	ebb2 080a 	subs.w	r8, r2, sl
 80028ce:	eb63 090b 	sbc.w	r9, r3, fp
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028e6:	ebb2 0408 	subs.w	r4, r2, r8
 80028ea:	eb63 0509 	sbc.w	r5, r3, r9
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	00eb      	lsls	r3, r5, #3
 80028f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028fc:	00e2      	lsls	r2, r4, #3
 80028fe:	4614      	mov	r4, r2
 8002900:	461d      	mov	r5, r3
 8002902:	eb14 030a 	adds.w	r3, r4, sl
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	eb45 030b 	adc.w	r3, r5, fp
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800291a:	4629      	mov	r1, r5
 800291c:	028b      	lsls	r3, r1, #10
 800291e:	4621      	mov	r1, r4
 8002920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002924:	4621      	mov	r1, r4
 8002926:	028a      	lsls	r2, r1, #10
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	2200      	movs	r2, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	60fa      	str	r2, [r7, #12]
 8002934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002938:	f7fd fc64 	bl	8000204 <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4613      	mov	r3, r2
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_GetSysClockFreq+0x180>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	3301      	adds	r3, #1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800295e:	e002      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetSysClockFreq+0x184>)
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002968:	4618      	mov	r0, r3
 800296a:	3740      	adds	r7, #64	; 0x40
 800296c:	46bd      	mov	sp, r7
 800296e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	00f42400 	.word	0x00f42400
 800297c:	017d7840 	.word	0x017d7840

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000008 	.word	0x20000008

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a9b      	lsrs	r3, r3, #10
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	0800475c 	.word	0x0800475c

080029c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e273      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d075      	beq.n	8002aca <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029de:	4b88      	ldr	r3, [pc, #544]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d00c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ea:	4b85      	ldr	r3, [pc, #532]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d112      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f6:	4b82      	ldr	r3, [pc, #520]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a02:	d10b      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	4b7e      	ldr	r3, [pc, #504]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d05b      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x108>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d157      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e24e      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d106      	bne.n	8002a34 <HAL_RCC_OscConfig+0x74>
 8002a26:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a75      	ldr	r2, [pc, #468]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e01d      	b.n	8002a70 <HAL_RCC_OscConfig+0xb0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x98>
 8002a3e:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6f      	ldr	r2, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b6d      	ldr	r3, [pc, #436]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6c      	ldr	r2, [pc, #432]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0xb0>
 8002a58:	4b69      	ldr	r3, [pc, #420]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a68      	ldr	r2, [pc, #416]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b66      	ldr	r3, [pc, #408]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a65      	ldr	r2, [pc, #404]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fd98 	bl	80015ac <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fe fd94 	bl	80015ac <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	; 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e213      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b5b      	ldr	r3, [pc, #364]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0xc0>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fd84 	bl	80015ac <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fd80 	bl	80015ac <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e1ff      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	4b51      	ldr	r3, [pc, #324]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xe8>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d063      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ad6:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d11c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aee:	4b44      	ldr	r3, [pc, #272]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d116      	bne.n	8002b28 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_RCC_OscConfig+0x152>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e1d3      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4937      	ldr	r1, [pc, #220]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	e03a      	b.n	8002b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b30:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <HAL_RCC_OscConfig+0x244>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe fd39 	bl	80015ac <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fd35 	bl	80015ac <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e1b4      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5c:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4925      	ldr	r1, [pc, #148]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
 8002b70:	e015      	b.n	8002b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCC_OscConfig+0x244>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fd18 	bl	80015ac <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b80:	f7fe fd14 	bl	80015ac <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e193      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d036      	beq.n	8002c18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_RCC_OscConfig+0x248>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fcf8 	bl	80015ac <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7fe fcf4 	bl	80015ac <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e173      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x200>
 8002bde:	e01b      	b.n	8002c18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_OscConfig+0x248>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fe fce1 	bl	80015ac <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	e00e      	b.n	8002c0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bee:	f7fe fcdd 	bl	80015ac <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d907      	bls.n	8002c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e15c      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
 8002c00:	40023800 	.word	0x40023800
 8002c04:	42470000 	.word	0x42470000
 8002c08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b8a      	ldr	r3, [pc, #552]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ea      	bne.n	8002bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8097 	beq.w	8002d54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a7e      	ldr	r2, [pc, #504]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b79      	ldr	r3, [pc, #484]	; (8002e3c <HAL_RCC_OscConfig+0x47c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <HAL_RCC_OscConfig+0x47c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a75      	ldr	r2, [pc, #468]	; (8002e3c <HAL_RCC_OscConfig+0x47c>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fc9d 	bl	80015ac <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7fe fc99 	bl	80015ac <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e118      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b6c      	ldr	r3, [pc, #432]	; (8002e3c <HAL_RCC_OscConfig+0x47c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x2ea>
 8002c9c:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x324>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x30c>
 8002cb2:	4b61      	ldr	r3, [pc, #388]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a60      	ldr	r2, [pc, #384]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	4a5d      	ldr	r2, [pc, #372]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCC_OscConfig+0x324>
 8002ccc:	4b5a      	ldr	r3, [pc, #360]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4a59      	ldr	r2, [pc, #356]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd8:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	4a56      	ldr	r2, [pc, #344]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002cde:	f023 0304 	bic.w	r3, r3, #4
 8002ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d015      	beq.n	8002d18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fe fc5e 	bl	80015ac <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fc5a 	bl	80015ac <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0d7      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0a:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0ee      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x334>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe fc48 	bl	80015ac <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f7fe fc44 	bl	80015ac <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e0c1      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d36:	4b40      	ldr	r3, [pc, #256]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ee      	bne.n	8002d20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d48:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	4a3a      	ldr	r2, [pc, #232]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80ad 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d060      	beq.n	8002e2c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d145      	bne.n	8002dfe <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <HAL_RCC_OscConfig+0x480>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fc18 	bl	80015ac <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe fc14 	bl	80015ac <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e093      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	019b      	lsls	r3, r3, #6
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	3b01      	subs	r3, #1
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	071b      	lsls	r3, r3, #28
 8002dca:	491b      	ldr	r1, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x480>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fbe9 	bl	80015ac <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe fbe5 	bl	80015ac <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e064      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x41e>
 8002dfc:	e05c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCC_OscConfig+0x480>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe fbd2 	bl	80015ac <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fbce 	bl	80015ac <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e04d      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x44c>
 8002e2a:	e045      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e040      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e44:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <HAL_RCC_OscConfig+0x504>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d030      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d129      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d122      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d119      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d10f      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800

08002ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e041      	b.n	8002f5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe f9f4 	bl	80012dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f000 f9b8 	bl	800327c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_TIM_PWM_Start+0x24>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e022      	b.n	8002fd2 <HAL_TIM_PWM_Start+0x6a>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d109      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0x3e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e015      	b.n	8002fd2 <HAL_TIM_PWM_Start+0x6a>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d109      	bne.n	8002fc0 <HAL_TIM_PWM_Start+0x58>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	bf14      	ite	ne
 8002fb8:	2301      	movne	r3, #1
 8002fba:	2300      	moveq	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e008      	b.n	8002fd2 <HAL_TIM_PWM_Start+0x6a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e07c      	b.n	80030d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d104      	bne.n	8002fea <HAL_TIM_PWM_Start+0x82>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe8:	e013      	b.n	8003012 <HAL_TIM_PWM_Start+0xaa>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d104      	bne.n	8002ffa <HAL_TIM_PWM_Start+0x92>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff8:	e00b      	b.n	8003012 <HAL_TIM_PWM_Start+0xaa>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d104      	bne.n	800300a <HAL_TIM_PWM_Start+0xa2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003008:	e003      	b.n	8003012 <HAL_TIM_PWM_Start+0xaa>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2201      	movs	r2, #1
 8003018:	6839      	ldr	r1, [r7, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fb7e 	bl	800371c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <HAL_TIM_PWM_Start+0x174>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_TIM_PWM_Start+0xcc>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <HAL_TIM_PWM_Start+0x178>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d101      	bne.n	8003038 <HAL_TIM_PWM_Start+0xd0>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_TIM_PWM_Start+0xd2>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a22      	ldr	r2, [pc, #136]	; (80030dc <HAL_TIM_PWM_Start+0x174>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <HAL_TIM_PWM_Start+0x136>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d01d      	beq.n	800309e <HAL_TIM_PWM_Start+0x136>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_TIM_PWM_Start+0x17c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d018      	beq.n	800309e <HAL_TIM_PWM_Start+0x136>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <HAL_TIM_PWM_Start+0x180>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_TIM_PWM_Start+0x136>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <HAL_TIM_PWM_Start+0x184>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00e      	beq.n	800309e <HAL_TIM_PWM_Start+0x136>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_TIM_PWM_Start+0x178>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_TIM_PWM_Start+0x136>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <HAL_TIM_PWM_Start+0x188>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_TIM_PWM_Start+0x136>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <HAL_TIM_PWM_Start+0x18c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d111      	bne.n	80030c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b06      	cmp	r3, #6
 80030ae:	d010      	beq.n	80030d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c0:	e007      	b.n	80030d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40010400 	.word	0x40010400
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40001800 	.word	0x40001800

080030f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003112:	2302      	movs	r3, #2
 8003114:	e0ae      	b.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	f200 809f 	bhi.w	8003264 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003161 	.word	0x08003161
 8003130:	08003265 	.word	0x08003265
 8003134:	08003265 	.word	0x08003265
 8003138:	08003265 	.word	0x08003265
 800313c:	080031a1 	.word	0x080031a1
 8003140:	08003265 	.word	0x08003265
 8003144:	08003265 	.word	0x08003265
 8003148:	08003265 	.word	0x08003265
 800314c:	080031e3 	.word	0x080031e3
 8003150:	08003265 	.word	0x08003265
 8003154:	08003265 	.word	0x08003265
 8003158:	08003265 	.word	0x08003265
 800315c:	08003223 	.word	0x08003223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f928 	bl	80033bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0208 	orr.w	r2, r2, #8
 800317a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	619a      	str	r2, [r3, #24]
      break;
 800319e:	e064      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f978 	bl	800349c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6999      	ldr	r1, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	021a      	lsls	r2, r3, #8
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	619a      	str	r2, [r3, #24]
      break;
 80031e0:	e043      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f9cd 	bl	8003588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0208 	orr.w	r2, r2, #8
 80031fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0204 	bic.w	r2, r2, #4
 800320c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69d9      	ldr	r1, [r3, #28]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	61da      	str	r2, [r3, #28]
      break;
 8003220:	e023      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fa21 	bl	8003670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	021a      	lsls	r2, r3, #8
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	61da      	str	r2, [r3, #28]
      break;
 8003262:	e002      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
      break;
 8003268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a40      	ldr	r2, [pc, #256]	; (8003390 <TIM_Base_SetConfig+0x114>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329a:	d00f      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <TIM_Base_SetConfig+0x118>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00b      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3c      	ldr	r2, [pc, #240]	; (8003398 <TIM_Base_SetConfig+0x11c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3b      	ldr	r2, [pc, #236]	; (800339c <TIM_Base_SetConfig+0x120>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0x40>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <TIM_Base_SetConfig+0x124>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d108      	bne.n	80032ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <TIM_Base_SetConfig+0x114>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d027      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <TIM_Base_SetConfig+0x118>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d023      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2b      	ldr	r2, [pc, #172]	; (8003398 <TIM_Base_SetConfig+0x11c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01f      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2a      	ldr	r2, [pc, #168]	; (800339c <TIM_Base_SetConfig+0x120>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01b      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <TIM_Base_SetConfig+0x124>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d017      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <TIM_Base_SetConfig+0x128>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <TIM_Base_SetConfig+0x12c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a26      	ldr	r2, [pc, #152]	; (80033ac <TIM_Base_SetConfig+0x130>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <TIM_Base_SetConfig+0x134>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <TIM_Base_SetConfig+0x138>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <TIM_Base_SetConfig+0x13c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d108      	bne.n	8003340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <TIM_Base_SetConfig+0x114>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_Base_SetConfig+0xf8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <TIM_Base_SetConfig+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d103      	bne.n	800337c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	615a      	str	r2, [r3, #20]
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	40010400 	.word	0x40010400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40014400 	.word	0x40014400
 80033ac:	40014800 	.word	0x40014800
 80033b0:	40001800 	.word	0x40001800
 80033b4:	40001c00 	.word	0x40001c00
 80033b8:	40002000 	.word	0x40002000

080033bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0201 	bic.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0303 	bic.w	r3, r3, #3
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 0302 	bic.w	r3, r3, #2
 8003404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a20      	ldr	r2, [pc, #128]	; (8003494 <TIM_OC1_SetConfig+0xd8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_OC1_SetConfig+0x64>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <TIM_OC1_SetConfig+0xdc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d10c      	bne.n	800343a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0308 	bic.w	r3, r3, #8
 8003426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a15      	ldr	r2, [pc, #84]	; (8003494 <TIM_OC1_SetConfig+0xd8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d003      	beq.n	800344a <TIM_OC1_SetConfig+0x8e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <TIM_OC1_SetConfig+0xdc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d111      	bne.n	800346e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40010000 	.word	0x40010000
 8003498:	40010400 	.word	0x40010400

0800349c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f023 0210 	bic.w	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0320 	bic.w	r3, r3, #32
 80034e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a22      	ldr	r2, [pc, #136]	; (8003580 <TIM_OC2_SetConfig+0xe4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_OC2_SetConfig+0x68>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a21      	ldr	r2, [pc, #132]	; (8003584 <TIM_OC2_SetConfig+0xe8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10d      	bne.n	8003520 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a17      	ldr	r2, [pc, #92]	; (8003580 <TIM_OC2_SetConfig+0xe4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_OC2_SetConfig+0x94>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <TIM_OC2_SetConfig+0xe8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d113      	bne.n	8003558 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40010400 	.word	0x40010400

08003588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a21      	ldr	r2, [pc, #132]	; (8003668 <TIM_OC3_SetConfig+0xe0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_OC3_SetConfig+0x66>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a20      	ldr	r2, [pc, #128]	; (800366c <TIM_OC3_SetConfig+0xe4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10d      	bne.n	800360a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a16      	ldr	r2, [pc, #88]	; (8003668 <TIM_OC3_SetConfig+0xe0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_OC3_SetConfig+0x92>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a15      	ldr	r2, [pc, #84]	; (800366c <TIM_OC3_SetConfig+0xe4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d113      	bne.n	8003642 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	621a      	str	r2, [r3, #32]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40010000 	.word	0x40010000
 800366c:	40010400 	.word	0x40010400

08003670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	031b      	lsls	r3, r3, #12
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <TIM_OC4_SetConfig+0xa4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_OC4_SetConfig+0x68>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a11      	ldr	r2, [pc, #68]	; (8003718 <TIM_OC4_SetConfig+0xa8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d109      	bne.n	80036ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40010000 	.word	0x40010000
 8003718:	40010400 	.word	0x40010400

0800371c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2201      	movs	r2, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1a      	ldr	r2, [r3, #32]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a1a      	ldr	r2, [r3, #32]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800377c:	2302      	movs	r3, #2
 800377e:	e05a      	b.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a21      	ldr	r2, [pc, #132]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d01d      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a17      	ldr	r2, [pc, #92]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10c      	bne.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40001800 	.word	0x40001800

08003860 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003878:	2302      	movs	r3, #2
 800387a:	e03d      	b.n	80038f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <memset>:
 8003904:	4402      	add	r2, r0
 8003906:	4603      	mov	r3, r0
 8003908:	4293      	cmp	r3, r2
 800390a:	d100      	bne.n	800390e <memset+0xa>
 800390c:	4770      	bx	lr
 800390e:	f803 1b01 	strb.w	r1, [r3], #1
 8003912:	e7f9      	b.n	8003908 <memset+0x4>

08003914 <__libc_init_array>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4d0d      	ldr	r5, [pc, #52]	; (800394c <__libc_init_array+0x38>)
 8003918:	4c0d      	ldr	r4, [pc, #52]	; (8003950 <__libc_init_array+0x3c>)
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	2600      	movs	r6, #0
 8003920:	42a6      	cmp	r6, r4
 8003922:	d109      	bne.n	8003938 <__libc_init_array+0x24>
 8003924:	4d0b      	ldr	r5, [pc, #44]	; (8003954 <__libc_init_array+0x40>)
 8003926:	4c0c      	ldr	r4, [pc, #48]	; (8003958 <__libc_init_array+0x44>)
 8003928:	f000 f818 	bl	800395c <_init>
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	2600      	movs	r6, #0
 8003932:	42a6      	cmp	r6, r4
 8003934:	d105      	bne.n	8003942 <__libc_init_array+0x2e>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	f855 3b04 	ldr.w	r3, [r5], #4
 800393c:	4798      	blx	r3
 800393e:	3601      	adds	r6, #1
 8003940:	e7ee      	b.n	8003920 <__libc_init_array+0xc>
 8003942:	f855 3b04 	ldr.w	r3, [r5], #4
 8003946:	4798      	blx	r3
 8003948:	3601      	adds	r6, #1
 800394a:	e7f2      	b.n	8003932 <__libc_init_array+0x1e>
 800394c:	0800476c 	.word	0x0800476c
 8003950:	0800476c 	.word	0x0800476c
 8003954:	0800476c 	.word	0x0800476c
 8003958:	08004770 	.word	0x08004770

0800395c <_init>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr

08003968 <_fini>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr
